library IEEE;
use IEEE.std_logic_1164.all;
entity FullAdder is
	Port(
		A, B : in std_logic_vector(7 downto 0);
		clock, reset : in std_logic;
		cin, X : in std_logic_vector(0 downto 0);
		result : out std_logic_vector(7 downto 0);
		cout: out std_logic_vector(0 downto 0)
	);
end FullAdder;
architecture ArchFullAdder of FullAdder is
	signal res : std_logic_vector(7 downto 0) := (others => '0');
	signal sum : std_logic_vector(0 downto 0) := "0";
	signal carry_out: std_logic_vector(0 downto 0) := "0";
	signal carry_in : std_logic_vector(0 downto 0) := cin;
	signal counter : integer := 0;
begin
	process(clock, reset)
	begin
		if reset = '0' then
			res <= (others => '0');
			counter <= 0;
			carry_out <= "0";
			carry_in <= cin;
			sum <= "0";
		elsif rising_edge(clock) then
			if counter < 8 then
				if counter = 0 then
					carry_in <= cin;
					sum(0) <= A(0) XOR (B(0) XOR X(0));
					carry_out(0) <= A(0) AND (B(0) XOR X(0));
				else
					sum(0) <= (A(counter) XOR (B(counter) XOR X(0))) XOR carry_in(0);
					carry_out(0) <= (A(counter) AND (B(counter) XOR X(0))) or ((B(counter) XOR X(0)) AND carry_in(0)) or ((A(counter) XOR (B(counter) XOR X(0))) AND carry_in(0));
				end if;
				res(counter) <= sum(0);
				carry_in <= carry_out;
				counter <= counter + 1;
			else
				counter <= 0;
			end if;
		end if;
		result <= res;
		cout <= carry_out;
	end process;
end ArchFullAdder;