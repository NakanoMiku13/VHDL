library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Display4Digits is
    Port (
        clk : in STD_LOGIC;
        reset : in STD_LOGIC;
        number : in STD_LOGIC_VECTOR(3 downto 0);
        segments : out STD_LOGIC_VECTOR(7 downto 0);
        anodes : out STD_LOGIC_VECTOR(3 downto 0)
    );
end Display4Digits;

architecture Behavioral of Display4Digits is
    signal counter : integer := 0;
    signal digit : STD_LOGIC_VECTOR(3 downto 0) := "0000";
    signal display_data : STD_LOGIC_VECTOR(7 downto 0);

    constant digit_values : STD_LOGIC_VECTOR(9 downto 0) :=
        "00111111", -- 0
        "00000110", -- 1
        "01011011", -- 2
        "01001111", -- 3
        "01100110", -- 4
        "01101101", -- 5
        "01111101", -- 6
        "00000111", -- 7
        "01111111", -- 8
        "01101111"; -- 9

begin
    process(clk, reset)
    begin
        if reset = '1' then
            counter <= 0;
            digit <= "0000";
        elsif rising_edge(clk) then
            if counter = 0 then
                digit <= number;
            end if;
            counter <= counter + 1;
            if counter = 4 then
                counter <= 0;
            end if;
        end if;
    end process;

    process(digit)
    begin
        case digit is
            when "00--" =>
                display_data <= digit_values(0);
            when "01--" =>
                display_data <= digit_values(1);
            when "10--" =>
                display_data <= digit_values(2);
            when "11--" =>
                display_data <= digit_values(3);
            when others =>
                display_data <= "11111111";
        end case;
    end process;

    segments <= display_data;
    anodes <= "1110" when counter = 0 else
              "1101" when counter = 1 else
              "1011" when counter = 2 else
              "0111" when counter = 3 else
              "1111"; -- Apaga todos los dÃ­gitos
              
end Behavioral;
